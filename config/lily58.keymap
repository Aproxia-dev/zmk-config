/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define ALPHA 0
#define LOWER 1
#define RAISE 2

#define NUM 1
#define SYM 2
#define TRI 3
#define GAME 4

#define HRM(key,mod) &hrm mod   key
#define LBD(layer)   &lbd layer layer
#define LRE(layer)   &lre layer layer

&lt {
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
};

/ {
    behaviors {
        hrm: home_row_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
        };
        
        // hybrid keys
        bsdel: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
        rtesc: return_escape {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RET>, <&kp ESC>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
        sptab: space_tab {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp TAB>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
        
        // hybrid layer keys
        lbd: layer_backspace_delete {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&mo>, <&bsdel>;
        };
        lre: layer_return_escape {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&mo>, <&rtesc>;
        };
    };

    conditional_layers {
	    compatible = "zmk,conditional-layers";
	    tri_layer {
		    if-layers = <NUM SYM>;
		    then-layer = <TRI>;
	    };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC   &kp N1 &kp N2      &kp N3      &kp N4       &kp N5                      &kp N6   &kp N7       &kp N8      &kp N9      &kp N0   &bsdel
&kp TAB   &kp Q  &kp W       &kp F       &kp P        &kp B                       &kp J    &kp L        &kp U       &kp Y       &kp SQT  &kp BSLH
&kp LCTRL &kp A  HRM(R,LALT) HRM(S,LGUI) HRM(T,LCTRL) &kp G                       &kp M    HRM(N,LCTRL) HRM(E,LGUI) HRM(I,LALT) &kp O    &kp SEMI
&kp LSHFT &kp Z  &kp X       &kp C       &kp D        &kp V     &none    &none    &kp K    &kp H        &kp COMMA   &kp DOT     &kp FSLH &kp RALT
                             &none       &to GAME     &kp LSHFT LBD(SYM) LRE(NUM) &sptab   &trans       &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {
            bindings = <
&trans &trans    &trans &trans &trans &trans                 &trans   &trans   &trans    &trans    &trans    &trans
&trans &kp FSLH  &kp N7 &kp N8 &kp N9 &kp MINUS              &none    &none    &none     &none     &none     &trans
&trans &kp STAR  &kp N4 &kp N5 &kp N6 &kp PLUS               &kp CAPS &kp LEFT &kp DOWN  &kp UP    &kp RIGHT &trans
&trans &kp CARET &kp N1 &kp N2 &kp N3 &kp DOT  &trans &trans &kp INS  &kp HOME &kp PG_DN &kp PG_UP &kp END   &trans
                        &trans &kp N0 &trans   &trans &trans &trans &trans &trans 
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        raise_layer {
            bindings = <
&trans &trans   &trans   &trans   &trans   &trans                  &trans    &trans    &trans    &trans    &trans    &trans
&trans &kp EXCL &kp AT   &kp HASH &kp DLLR &kp PRCNT               &kp CARET &kp AMPS  &kp STAR  &kp GRAVE &kp TILDE &trans
&trans &kp LBRC &kp RBRC &kp LPAR &kp RPAR &kp COMMA               &kp DOT   &kp MINUS &kp UNDER &kp BSLH  &kp PIPE  &trans
&trans &kp LT   &kp GT   &kp LBKT &kp RBKT &kp FSLH  &trans &trans &kp QMARK &kp EQUAL &kp PLUS  &kp SEMI  &kp COLON &trans
                         &trans   &trans   &trans    &trans &trans &trans    &trans    &trans 
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        tri_layer {
            bindings = <
&trans &trans  &trans &trans &trans &trans                &trans &trans     &trans       &trans       &trans &trans
&trans &kp F12 &kp F7 &kp F8 &kp F9 &none                 &none  &kp C_PP   &kp C_PREV   &kp C_NEXT   &none  &trans
&trans &kp F11 &kp F4 &kp F5 &kp F6 &none                 &none  &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &none  &trans
&trans &kp F10 &kp F1 &kp F2 &kp F3 &none   &trans &trans &none  &kp PSCRN  &kp C_BRI_DN &kp C_BRI_UP &none  &trans
                      &trans &trans &trans  &trans &trans &trans &trans &trans 
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        game_layer {
            bindings = <
&kp ESC   &kp N4 &kp N5 &kp N6 &kp N7 &kp N8                          &trans &trans &trans &trans    &trans     &trans
&kp TAB   &kp N1 &kp Q  &kp W  &kp E  &kp R                           &kp T  &kp Y  &kp U  &kp I     &kp O      &kp P
&kp LCTRL &kp N2 &kp A  &kp S  &kp D  &kp F                           &kp G  &kp H  &kp J  &kp K     &kp L      &kp SEMI
&kp LSHFT &kp N3 &kp Z  &kp X  &kp C  &kp V     &trans     &trans     &kp B  &kp N  &kp M  &kp COMMA &kp PERIOD &to ALPHA
                        &trans &trans &mo ALPHA &kp SPACE  &kp RETURN &mo LOWER &mo RAISE &trans 
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
    };
};
